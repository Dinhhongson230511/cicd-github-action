name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# Events but only for the master branch
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    env:
      DB_DATABASE: workspace
    steps:
      - name: Set Up Mysql 8 ‚öôÔ∏è
        run: |
          echo -e "Enable LOAD DATA LOCAL INFILE in my.cnf\n"
          echo -e "SETTING secure-file-priv TO EMPTY STRING\n"
          echo -e "[mysqld]\nsecure-file-priv=''" | sudo tee -a /etc/mysql/my.cnf
          echo -e "SETTING local_infile TO ON\n"
          echo -e "[mysqld]\nlocal_infile='ON'" | sudo tee -a /etc/mysql/my.cnf
          echo -e "Start MYSQL service, it is off by default\n"
          sudo systemctl enable mysql.service
          sudo systemctl start mysql.service
          echo -e "Creating crankd-workspace Database\n"
          mysql --host 127.0.0.1 -uroot -proot -e 'CREATE DATABASE IF NOT EXISTS workspace;'
          echo -e "Check new settings\n"
          mysql --host 127.0.0.1 -uroot -proot -e "SELECT @@global.secure_file_priv, @@global.local_infile"

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: '8.1'
          # extensions: mbstring, dom, fileinfo, mysql
          # coverage: xdebug
      - uses: actions/checkout@v3

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
        env:
          DB_DATABASE: workspace

      - name: Check PHP version
        run: php -v

      - name: Check composer version
        run: composer -V

      - name: Install Dependencies (PHP vendors)
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        
      - name: Prepare the application üîß
        run: |
          php artisan key:generate

      - name: composer dump autoload
        run: composer dump-autoload

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Clear Config üóëÔ∏è
        run: |
          php artisan config:clear
          php artisan cache:clear
          php artisan optimize:clear

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: ./vendor/bin/pest